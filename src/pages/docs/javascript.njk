---
title: Using JavaScript
description: This describes how to use JavaScript for modern/legacy browsers.
tags: docs
---

{% extends "layouts/default.njk" %}

{% block content %}
  <article class="cmp-container cmp-stack">
    <h1>
      Using JavaScript
    </h1>
    <p>
      This project handles JavaScript by convention. Putting a <code>.js</code>
      file in <code>src/assets/js</code> will automatically signify it as an
      entry point for esbuild to process. Any subfolders will not be used as
      entrypoints, so it's recommended to organize your JS in subfolders, and
      then import what you need into files at the <code>src/assets/js</code>
      level.
    </p>
    <p>
      For example, given this structure, an output file would be created for
      <code>example.js</code>, but not for <code>add.js</code> or
      <code>subtract.js</code>.
    </p>
<pre>
src/assets/js/
|– utilities/
|  |– add.js
|  |– subtract.js
|– example.js
</pre>

    <p>
      The output JS files would land in <code>dist/assets/js</code>, keeping
      their original names and file extensions. With code splitting, there may
      be additional files written there with names like
      <code>chunk-5X6LSU5U.js</code>. Those chunks include code that's shared
      between entrypoints, and you don't need to do anything special with them.
    </p>
<pre>
dist/assets/js/
|– example.js
</pre>

    <p>
      Include the file in a standard <code>script</code> element, and you're
      good to go.
    </p>
<pre>
&lt;script src="/assets/js/example.js" type="module"&gt;&lt;/script&gt;
</pre>

    <h2>
      Legacy Bundles
    </h2>
    <p>
      To keep project maintenance at a minimum, and to keep up with the times,
      legacy bundles are not supported by default in this project. If you need
      to support older browsers, you'll need to bring your own build process for
      legacy bundles.
    </p>
    <p>
      In case you need to support an older browser that doesn't support ES
      Modules, you can use the module/nomodule pattern to serve modern JS to
      modern browsers and legacy JS to older browsers (lookin' at you IE11).
    </p>
    <p>
      The <code>type="module"</code> attribute prevents non-supporting browsers
      from trying to run the script, and the <code>nomodule</code> attribute
      tells modern browsers to not even bother with downloading the script.
    </p>
<pre>
&lt;script src="/assets/js/example.js" type="module"&gt;&lt;/script&gt;
&lt;script src="/assets/js/legacy/example.js" nomodule&gt;&lt;/script&gt;
</pre>

    <p>
      Even if you aren't fully supporting older browsers, you can use this
      pattern to provide a fallback experience to avoid your site being
      completely broken for users.
    </p>
  </article>
{% endblock %}

{% block scripts %}
  <!-- serve bundled script to modern browsers -->
  <script src="/assets/js/example.js" type="module"></script>
{% endblock %}
